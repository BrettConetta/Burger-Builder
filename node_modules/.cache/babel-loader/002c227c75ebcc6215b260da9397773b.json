{"ast":null,"code":"import _objectSpread from \"/Users/brett/Documents/dev/react/Burger-Builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/brett/Documents/dev/react/Burger-Builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          validation: {},\n          value: 'fastest',\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: 'true'\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: true,\n          purchasing: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n\n    this.checkValidity = (value, rules) => {\n      let isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/brett/Documents/dev/react/Burger-Builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","Input","Spinner","classes","axios","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","purchasing","history","push","catch","error","checkValidity","rules","isValid","trim","length","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\n\r\nclass ContactData extends Component {\r\n\tstate= {\r\n\t\torderForm: {\r\n\t\t\tname: {\r\n\t\t\t\telementType: 'input',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Your Name'\r\n\t\t\t\t},\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false\r\n\t\t\t},\r\n\t\t\tstreet: {\r\n\t\t\t\telementType: 'input',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Street'\r\n\t\t\t\t},\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false\r\n\t\t\t},\r\n\t\t\tzipCode: {\r\n\t\t\t\telementType: 'input',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'ZIP Code'\r\n\t\t\t\t},\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tminLength: 5,\r\n\t\t\t\t\tmaxLength: 5\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false\r\n\t\t\t},\r\n\t\t\tcountry: {\r\n\t\t\t\telementType: 'input',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Country'\r\n\t\t\t\t},\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false\r\n\t\t\t},\r\n\t\t\temail: {\r\n\t\t\t\telementType: 'input',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: 'email',\r\n\t\t\t\t\tplaceholder: 'Your E-Mail'\r\n\t\t\t\t},\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false\r\n\t\t\t},\r\n\t\t\tdeliveryMethod: {\r\n\t\t\t\telementType: 'select',\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\toptions: [\r\n\t\t\t\t\t\t{value: 'fastest', displayValue: 'Fastest'},\r\n\t\t\t\t\t\t{value: 'cheapest', displayValue: 'Cheapest'}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {},\r\n\t\t\t\tvalue: 'fastest',\r\n\t\t\t\tvalid: true\r\n\t\t\t}\r\n\t\t},\r\n\t\tformIsValid: false,\r\n\t\tloading: false\r\n\t}\r\n\r\n\torderHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tthis.setState({loading: 'true'});\r\n\t\tconst formData = {};\r\n\t\tfor(let formElementIdentifier in this.state.orderForm) {\r\n\t\t\tformData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n\t\t}\r\n\t\tconst order = {\r\n\t\t\tingredients: this.props.ingredients,\r\n\t\t\tprice: this.props.price,\r\n\t\t\torderData: formData\r\n\t\t\t\r\n\t\t}\r\n\t\taxios.post('/orders.json', order)\r\n\t\t.then(response => {\r\n\t\t\tthis.setState({loading: true, purchasing: false});\r\n\t\t\tthis.props.history.push('/');\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tthis.setState({loading: false, purchasing: false});\r\n\t\t});\r\n\t}\r\n\r\n\tcheckValidity = (value, rules) => {\r\n\t\tlet isValid = true;\r\n\r\n\t\tif(!rules) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(rules.required) {\r\n\t\t\tisValid = value.trim() !== '' && isValid;\r\n\t\t}\r\n\r\n\t\tif(rules.minLength){\r\n\t\t\tisValid = value.length >= rules.minLength && isValid;\r\n\t\t}\r\n\r\n\t\tif(rules.maxLength){\r\n\t\t\tisValid = value.length <= rules.maxLength && isValid;\r\n\t\t}\r\n\t\t\r\n\t\treturn isValid;\r\n\t}\r\n\r\n\tinputChangedHandler = (event, inputIdentifier) => {\r\n\t\tconst updatedOrderForm = {\r\n\t\t\t...this.state.orderForm\r\n\t\t};\r\n\t\tconst updatedFormElement = {\r\n\t\t\t...updatedOrderForm[inputIdentifier]\r\n\t\t};\r\n\r\n\t\tupdatedFormElement.value = event.target.value;\r\n\t\tupdatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n\t\tupdatedFormElement.touched = true;\r\n\t\tupdatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n\t\tlet formIsValid = true;\r\n\t\tfor(let inputIdentifier in updatedOrderForm) {\r\n\t\t\tformIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n\t\t}\r\n\r\n\t\tthis.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n\t\t\r\n\t}\r\n\r\n\trender () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n\t\t\t\t\t\tvalue={formElement.config.value}\r\n\t\t\t\t\t\tinvalid={!formElement.config.valid}\r\n\t\t\t\t\t\tshouldValidate={formElement.config.validation}\r\n\t\t\t\t\t\ttouched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if ( this.state.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}